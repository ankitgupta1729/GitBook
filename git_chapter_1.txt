(1) About Version Control

Version control is a system that records
changes to a file or set of files over time so that you can recall specific versions later. For the
examples in this book, you will use software source code as the files being version controlled,
though in reality you can do this with nearly any type of file on a computer.


If you are a graphic or web designer and want to keep every version of an image or layout (which
you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It
allows you to revert selected files back to a previous state, revert the entire project back to a
previous state, compare changes over time, see who last modified something that might be causing
a problem, who introduced an issue and when, and more. Using a VCS also generally means that if
you screw things up or lose files, you can easily recover. In addition, you get all this for very little
overhead.

(2) Local Version Control Systems

Many people’s version-control method of choice is to copy files into another directory (perhaps a
time-stamped directory, if they’re clever). This approach is very common because it is so simple, but
it is also incredibly error prone. It is easy to forget which directory you’re in and accidentally write
to the wrong file or copy over files you don’t mean to.

To deal with this issue, programmers long ago developed local VCSs that had a simple database that
kept all the changes to files under revision control.

One of the most popular VCS tools was a system called RCS(Revision Control System), which is still distributed with many
computers today. RCS works by keeping patch sets (that is, the differences between files) in a special
format on disk; it can then re-create what any file looked like at any point in time by adding up all
the patches.


(3) Centralized Version Control Systems

The next major issue that people encounter is that they need to collaborate with developers on
other systems. To deal with this problem, Centralized Version Control Systems (CVCSs) were
developed. These systems (such as CVS, Subversion, and Perforce) have a single server that contains
all the versioned files, and a number of clients that check out files from that central place. For many
years, this has been the standard for version control.
  
This setup offers many advantages, especially over local VCSs. For example, everyone knows to a
certain degree what everyone else on the project is doing. Administrators have fine-grained control
over who can do what, and it’s far easier to administer a CVCS than it is to deal with local databases
on every client.

However, this setup also has some serious downsides. The most obvious is the single point of failure
that the centralized server represents. If that server goes down for an hour, then during that hour
nobody can collaborate at all or save versioned changes to anything they’re working on. If the hard
disk the central database is on becomes corrupted, and proper backups haven’t been kept, you lose
absolutely everything — the entire history of the project except whatever single snapshots people
happen to have on their local machines. Local VCSs suffer from this same problem — whenever you
have the entire history of the project in a single place, you risk losing everything.

(4) Distributed Version Control Systems
  

This is where Distributed Version Control Systems (DVCSs) step in. In a DVCS (such as Git, Mercurial
or Darcs), clients don’t just check out the latest snapshot of the files; rather, they fully mirror the
repository, including its full history. Thus, if any server dies, and these systems were collaborating
via that server, any of the client repositories can be copied back up to the server to restore it. Every
clone is really a full backup of all the data.

Furthermore, many of these systems deal pretty well with having several remote repositories they
can work with, so you can collaborate with different groups of people in different ways
simultaneously within the same project. This allows you to set up several types of workflows that
aren’t possible in centralized systems, such as hierarchical models.


(5) What is Git?

(A) Snapshots, Not Differences:

The major difference between Git and any other VCS (Subversion and friends included) is the way
Git thinks about its data. Conceptually, most other systems store information as a list of file-based
changes. These other systems (CVS, Subversion, Perforce, and so on) think of the information they
store as a set of files and the changes made to each file over time (this is commonly described as
delta-based version control).

Git doesn’t think of or store its data this way. Instead, Git thinks of its data more like a series of
snapshots of a miniature filesystem. With Git, every time you commit, or save the state of your
project, Git basically takes a picture of what all your files look like at that moment and stores a
reference to that snapshot. To be efficient, if files have not changed, Git doesn’t store the file again,
just a link to the previous identical file it has already stored. Git thinks about its data more like a
stream of snapshots.

(B) Nearly Every Operation Is Local:

Most operations in Git need only local files and resources to operate — generally no information is
needed from another computer on your network. If you’re used to a CVCS where most operations
have that network latency overhead, this aspect of Git will make you think that the gods of speed
have blessed Git with unworldly powers. Because you have the entire history of the project right
there on your local disk, most operations seem almost instantaneous.

For example, to browse the history of the project, Git doesn’t need to go out to the server to get the
history and display it for you — it simply reads it directly from your local database. This means you
see the project history almost instantly. If you want to see the changes introduced between the
current version of a file and the file a month ago, Git can look up the file a month ago and do a local
difference calculation, instead of having to either ask a remote server to do it or pull an older
version of the file from the remote server to do it locally.

This also means that there is very little you can’t do if you’re offline or off VPN. If you get on an
airplane or a train and want to do a little work, you can commit happily (to your local copy,
remember?) until you get to a network connection to upload. If you go home and can’t get your VPN
client working properly, you can still work. In many other systems, doing so is either impossible or
painful. In Perforce, for example, you can’t do much when you aren’t connected to the server; in
Subversion and CVS, you can edit files, but you can’t commit changes to your database (because
your database is offline). This may not seem like a huge deal, but you may be surprised what a big
difference it can make


(C) Git Has Integrity:

Everything in Git is checksummed before it is stored and is then referred to by that checksum. This
means it’s impossible to change the contents of any file or directory without Git knowing about it.
This functionality is built into Git at the lowest levels and is integral to its philosophy. You can’t lose
information in transit or get file corruption without Git being able to detect it.

The mechanism that Git uses for this checksumming is called a SHA-1 hash. This is a 40-character
string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a
file or directory structure in Git. A SHA-1 hash looks something like this:

24b9da6552252987aa493b52f8696cd6d3b00373

You will see these hash values all over the place in Git because it uses them so much. In fact, Git
stores everything in its database not by file name but by the hash value of its contents.  

(D) Git Generally Only Adds Data:

When you do actions in Git, nearly all of them only add data to the Git database. It is hard to get the
system to do anything that is not undoable or to make it erase data in any way. As with any VCS, you
can lose or mess up changes you haven’t committed yet, but after you commit a snapshot into Git, it
is very difficult to lose, especially if you regularly push your database to another repository.

(E) The Three States:

(Important)

Git has three main states that your files can reside in: modified,
staged, and committed:

• Modified means that you have changed the file but have not committed it to your database yet.

• Staged means that you have marked a modified file in its current version to go into your next
commit snapshot.

• Committed means that the data is safely stored in your local database.

The working tree is a single checkout of one version of the project. These files are pulled out of the
compressed database in the Git directory and placed on disk for you to use or modify.

The staging area is a file, generally contained in your Git directory, that stores information about
what will go into your next commit. Its technical name in Git parlance is the “index”, but the phrase
“staging area” works just as well.

The Git directory is where Git stores the metadata and object database for your project. This is the
most important part of Git, and it is what is copied when you clone a repository from another
computer.

The basic Git workflow goes something like this:

1. You modify files in your working tree.

2. You selectively stage just those changes you want to be part of your next commit, which adds
only those changes to the staging area.

3. You do a commit, which takes the files as they are in the staging area and stores that snapshot
permanently to your Git directory


If a particular version of a file is in the Git directory, it’s considered committed. If it has been
modified and was added to the staging area, it is staged. And if it was changed since it was checked
out but has not been staged, it is modified.

(6) The Command Line

There are a lot of different ways to use Git. There are the original command-line tools, and there
are many graphical user interfaces of varying capabilities.

If you know how to run the command-line version, you can probably also figure out how to run the GUI version, while
the opposite is not necessarily true.

(7) Installing Git

You can either install it as a package or via another installer, or download the source code and compile it yourself.

Git is quite excellent at preserving backwards compatibility, any recent version should work just fine. 

-------------------------------------------------------------------------------------------------------------------------------

### Commands ###

1. To see the git config file

You can view all of your settings and where they are coming from using: 

git config --list --show-origin 

2. Your Identity

The first thing you should do when you install Git is to set your user name and email address. This
is important because every Git commit uses this information, and it’s immutably baked into the
commits you start creating:
------------------------------------------------------------
$ git config --global user.name "Ankit Gupta"
$ git config --global user.email ankitgupta1729@gmail.com
------------------------------------------------------------

Again, you need to do this only once if you pass the --global option, because then Git will always
use that information for anything you do on that system. If you want to override this with a
different name or email address for specific projects, you can run the command without the
--global option when you’re in that project.

Many of the GUI tools will help you do this when you first run them.

3. Your Editor

To set vs code editor: 

----------------------------------------------------------------
git config --global core.editor "code --wait"
----------------------------------------------------------------

4. Your default branch name

By default Git will create a branch called master when you create a new repository with git init.

From Git version 2.28 onwards, you can set a different name for the initial branch.

To set main as the default branch name do:

---------------------------------------------------------------------------------
git config --global init.defaultBranch main
---------------------------------------------------------------------------------

5. Checking Your Settings

If you want to check your configuration settings, you can use the git config --list command to list
all the settings Git can find at that point:

----------------------------------------------------------------------------------
git config --list
----------------------------------------------------------------------------------

You can also check what Git thinks a specific key’s value is by typing git config <key>:

----------------------------------------------------------------------------------
git config user.name
----------------------------------------------------------------------------------

Since Git might read the same configuration variable value from more than one
file, it’s possible that you have an unexpected value for one of these values and
you don’t know why. In cases like that, you can query Git as to the origin for that
value, and it will tell you which configuration file had the final say in setting that
value:

-----------------------------------------------------------------------------------
git config --show-origin rerere.autoUpdate
-----------------------------------------------------------------------------------

6. Getting Help

If you ever need help while using Git, there are three equivalent ways to get the comprehensive
manual page (manpage) help for any of the Git commands:

------------------------------------------------------------------------------------
$ git help <verb>
$ git <verb> --help
$ man git-<verb>
------------------------------------------------------------------------------------

For example, you can get the manpage help for the git config command by running this:

-----------------------------------------------------------------------------------
git help config
-----------------------------------------------------------------------------------

These commands are nice because you can access them anywhere, even offline. If the manpages
and this book aren’t enough and you need in-person help, you can try the #git, #github, or #gitlab
channels on the Libera Chat IRC server, which can be found at https://libera.chat/. These channels
are regularly filled with hundreds of people who are all very knowledgeable about Git and are
often willing to help.

In addition, if you don’t need the full-blown manpage help, but just need a quick refresher on the
available options for a Git command, you can ask for the more concise “help” output with the -h
option, as in:

-----------------------------------------------------------------------------------
git add -h
-----------------------------------------------------------------------------------